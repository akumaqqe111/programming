QT       += core gui

greaterThan(QT_MAJOR_VERSION, 4): QT += widgets

CONFIG += c++17

# You can make your code fail to compile if it uses deprecated APIs.
# In order to do so, uncomment the following line.
#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0

SOURCES += \
    Audio.cpp \
    Audiobook.cpp \
    Song.cpp \
    main.cpp \
    mainwindow.cpp

HEADERS += \
    Audio.h \
    Audiobook.h \
    Song.h \
    mainwindow.h

FORMS += \
    mainwindow.ui

# Default rules for deployment.
qnx: target.path = /tmp/$${TARGET}/bin
else: unix:!android: target.path = /opt/$${TARGET}/bin
!isEmpty(target.path): INSTALLS += target







(Audio.h)
#ifndef AUDIO_H
#define AUDIO_H

#include <iostream>
#include <string>
using namespace std;
class Audio
{
protected:
    int id;
    std::string name;
    std::string author;
    int year;
    int duration;
public:
 Audio() : id(0), name("not found"), author("not found"), year(0), duration(0){

 }
 void setId(int id) {
     this->id = id;
 }
 int getId() {
     return id;
 }
 void print() {
     cout << " Data:" << std::endl;
     cout << "ID: " << id << std::endl;
     cout << "Name: " << name << std::endl;
     cout << "Author: " << author << std::endl;
     cout << "Year: " << year << std::endl;
     cout << "Duration: " << duration << std::endl;

 }
 friend std::istream& operator>> (std::istream& in, Audio& song) {
     std::cout << "ID: ";
     in >> song.id;
     std::cout << "Name: ";
     in >> song.name;
     std::cout << "Author: ";
     in >> song.author;
     std::cout << "Year: ";
     in >> song.year;
     std::cout << "Duration: ";
     in >> song.duration;

     return in;

 }
 virtual void input() {
     std::cout << "ID: ";
     cin >> id;
     std::cout << "Name: ";
     cin >> name;
     std::cout << "Author: ";
     cin >> author;
     std::cout << "Year: ";
     cin >> year;
     std::cout << "Duration: ";
     cin >> duration;
 }
 friend std::ostream& operator<<(std::ostream& out, Audio& song) {
     out << " Data:" << std::endl;
     out << "ID: " << song.id << std::endl;
     out << "Name: " << song.name << std::endl;
     out << "Author: " << song.author << std::endl;
     out << "Year: " << song.year << std::endl;
     out << "Duration: " << song.duration << std::endl;
     return out;
 }
 virtual void printMessage() {
     std::cout << "virtual Function class Audio"<<endl;
 }
 ~Audio(){}
};

#endif // AUDIO_H






(Audiobook.h)
#ifndef AUDIOBOOK_H
#define AUDIOBOOK_H


#include "Audio.h"
#include <iostream>
#include <string>
using namespace std;
class Audiobook:public Audio {
private:
    std::string publisher;
    double price;
    std::string audioFormat;

public:

    Audiobook() : publisher("not found"),  price(0.0), audioFormat("not found") {

    }

    Audiobook(int id, const std::string& name, const std::string& author, const std::string& publisher,
        int year, int duration, double price, const std::string& audioFormat) {
        this->id = id;
        this->name = name;
        this->author = author;
        this->publisher = publisher;
        this->year = year;
        this->duration = duration;
        this->price = price;
        this->audioFormat = audioFormat;
    }

    Audiobook(const Audiobook& other)
    {
        this->id = other.id;
        this->name = other.name;
        this->author = other.author;
        this->publisher = other.publisher;
        this->year = other.year;
        this->duration = other.duration;
        this->price = other.price;
        this->audioFormat = other.audioFormat;
    }
    friend std::istream& operator>> (std::istream& in, Audiobook& audiobook) {
        std::cout << "ID: ";
        in >> audiobook.id;
        std::cout << "name: ";
        in >> audiobook.name;
        std::cout << "Author: ";
        in >> audiobook.author;
        std::cout << "Publisher: ";
        in >> audiobook.publisher;
        std::cout << "Publication Year: ";
        in >> audiobook.year;
        std::cout << "Duration: ";
        in >> audiobook.duration;
        std::cout << "Price: ";
        in >> audiobook.price;
        std::cout << "Audio Format: ";
        in >> audiobook.audioFormat;

        return in;
    }
    void input() override{
        Audio::input();
        std::cout << "Publisher: ";
        cin >> publisher;
        std::cout << "Price: ";
        cin >> price;
        std::cout << "Audio Format: ";
        cin >> audioFormat;
    }

    friend std::ostream& operator<<(std::ostream& out, Audiobook& audiobook) {
        out << "Data:" << std::endl;
        out << "ID: " << audiobook.id << std::endl;
        out << "name: " << audiobook.name << std::endl;
        out << "Author: " << audiobook.author << std::endl;
        out << "Publisher: " << audiobook.publisher << std::endl;
        out << "Publication Year: " << audiobook.year << std::endl;
        out << "Duration: " << audiobook.duration << " seconds" << std::endl;
        out << "Price: " << audiobook.price << " USD" << std::endl;
        out << "Audio Format: " << audiobook.audioFormat << std::endl;

        return out;
    }

    bool operator==(const Audiobook& other) const {
        return (
            id == other.id &&
            name == other.name &&
            author == other.author &&
            publisher == other.publisher &&
            year == other.year &&
            duration == other.duration &&
            price == other.price &&
            audioFormat == other.audioFormat);
    }
    void printMessage() override{
        std::cout << "virtual Function class Audiobook" << endl;
    }

    ~Audiobook() {

    }
};
#endif // AUDIOBOOK_H







(mainwindow.h)
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>


QT_BEGIN_NAMESPACE
namespace Ui { class mainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:


    void on_actionCreate_2_triggered();

    void on_actionExit_triggered();

    void on_actionOutput_triggered();

private:
    Ui::mainWindow *ui;
};
#endif // MAINWINDOW_H




(song.h)
#ifndef SONG_H
#define SONG_H


#include "Audio.h"
#include <iostream>
#include <string>
using namespace std;
class Song :public Audio {
private:

    std::string album;
    std::string genre;
    std::string lyricist;
    std::string language;

public:

    Song() :  album("not found"), genre("not found"), lyricist("not found"), language("not found") {

    }

    Song(int id, const std::string& name, const std::string& author, const std::string& album, const std::string& genre, const std::string& lyricist, const std::string& language, int year, int duration) {
        this->id = id;
        this->name = name;
        this->author = author;
        this->album = album;
        this->genre = genre;
        this->lyricist = lyricist;
        this->language = language;
        this->year = year;
        this->duration = duration;
    }

    Song(const Song& other)
    {
        this->id = other.id;
        this->name = other.name;
        this->author = other.author;
        this->album = other.album;
        this->genre = other.genre;
        this->lyricist = other.lyricist;
        this->language = other.language;
        this->year = other.year;
        this->duration = other.duration;
    }

    friend std::istream& operator>> (std::istream& in, Song& song) {
        std::cout << "ID: ";
        in >> song.id;
        std::cout << "Name: ";
        in >> song.name;
        std::cout << "Author: ";
        in >> song.author;
        std::cout << "Album: ";
        in >> song.album;
        std::cout << "Genre: ";
        in >> song.genre;
        std::cout << "Lyricist: ";
        in >> song.lyricist;
        std::cout << "Language: ";
        in >> song.language;
        std::cout << "Year: ";
        in >> song.year;
        std::cout << "Duration: ";
        in >> song.duration;

        return in;

    }
 void input() override {
        Audio::input();
        std::cout << "Album: ";
        cin >> album;
        std::cout << "Genre: ";
        cin >> genre;
        std::cout << "Lyricist: ";
        cin >> lyricist;
        std::cout << "Language: ";
        cin >> language;
    }
    friend std::ostream& operator<<(std::ostream& out, Song& song) {
        out << " Data:" << std::endl;
        out << "ID: " << song.id << std::endl;
        out << "Name: " << song.name << std::endl;
        out << "Author: " << song.author << std::endl;
        out << "Album: " << song.album << std::endl;
        out << "Genre: " << song.genre << std::endl;
        out << "Lyricist: " << song.lyricist << std::endl;
        out << "Language: " << song.language << std::endl;
        out << "Year: " << song.year << std::endl;
        out << "Duration: " << song.duration << std::endl;
        return out;
    }
    bool operator==(const Song& other) const {
        return  (
            id == other.id &&
            name == other.name &&
            author == other.author &&
            album == other.album &&
            genre == other.genre &&
            lyricist == other.lyricist &&
            language == other.language &&
            year == other.year && duration == other.duration);
    }
    void printMessage() override {
        std::cout << "virtual Function class Song" << endl;
    }
    std::string toString() const {
            // Використовуйте std::to_string для конвертації числових значень у рядок
            return "ID: " + std::to_string(id) + "\n" +
                   "Name: " + name + "\n" +
                   "Author: " + author + "\n" +
                   "Album: " + album + "\n" +
                   "Genre: " + genre + "\n" +
                   "Lyricist: " + lyricist + "\n" +
                   "Language: " + language + "\n" +
                   "Year: " + std::to_string(year) + "\n" +
                   "Duration: " + std::to_string(duration) + " seconds";
        }

    ~Song() {

    }
};
#endif // SONG_H





#include "Audio.h"



#include "Audiobook.h"



(main.cpp)
#include "mainwindow.h"
#include "Song.h"
#include <QApplication>
#include <QMessageBox>
int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MainWindow w;


    w.show();
    return a.exec();
}


(mainwindow.cpp)
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "Song.h"
#include <QMessageBox>
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::mainWindow)
{
    ui->setupUi(this);
}

MainWindow::~MainWindow()
{
    delete ui;
}





void MainWindow::on_actionCreate_2_triggered()
{
    if (ui->lineEdit_id->text().isEmpty() &&
        ui->lineEdit_name->text().isEmpty() &&
        ui->lineEdit_author->text().isEmpty() &&
        ui->lineEdit_album->text().isEmpty() &&
        ui->lineEdit_genre->text().isEmpty() &&
        ui->lineEdit_lyric->text().isEmpty() &&
        ui->lineEdit_languige->text().isEmpty() &&
        ui->lineEdit_duration->text().isEmpty() &&
        ui->lineEdit_year->text().isEmpty())
    {
        QMessageBox::information(nullptr, "Пусте полк", "Введіть всі поля");
    }
    else{
        Song song(ui->lineEdit_id->text().toInt(),
                  ui->lineEdit_name->text().toStdString(),
                  ui->lineEdit_author->text().toStdString(),
                  ui->lineEdit_album->text().toStdString(),
                  ui->lineEdit_genre->text().toStdString(),
                  ui->lineEdit_lyric->text().toStdString(),
                  ui->lineEdit_languige->text().toStdString(),
                  ui->lineEdit_year->text().toInt(),
                  ui->lineEdit_duration->text().toInt());
QMessageBox::information(nullptr, "Object song", QString::fromStdString(song.toString()));
    }



}








void MainWindow::on_actionExit_triggered()
{
    close();
}


void MainWindow::on_actionOutput_triggered()
{

}




#include "Song.h"
